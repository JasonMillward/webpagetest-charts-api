#!/usr/bin/env node

/*
 * This is pretty mich all boilerplate except for 
 * SUITE_CONFIG at the top and app.startTests() at the bottom
 */

var fs  = require('fs');

//a config file is required on startup
if(!fs.existsSync(process.env.SUITE_CONFIG)) {
  throw new Error(
    'Config file: ' + process.env.SUITE_CONFIG + ' not found! ' +
    'You must supply a valid path to your ' +
    'SUITE_CONFIG env value for the test config. E.g. ' +
    '`export SUITE_CONFIG=/var/wpt_configs/foo.json && npm start`'
  );
}

var app   = require('../app');
var debug = require('debug')('wpt-api:server');
var http  = require('http');


var port  = normalizePort(process.env.PORT || '3001');
app.set('port', port);
var server = http.createServer(app);

/*
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/*
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/*
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/*
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  //start running the tests.
  app.startTests();
}
